#ifndef LDPCDECH
#define LDPCDECH



#include <hls_math.h>
#include <ap_int.h>
#include<vector>
#include<iostream>
#include<string>
#include<bits/stdc++.h>

using namespace std;
#define N 1536
#define K 1024
#define BL 64
#define ITERNUM 4
struct ARRAY2{
	ap_int<8> a1,a2;
};
struct ARRAY12{
	ap_int<8> a[12];
};



const ap_uint<12> rowPara[46][20]={
		{ 0, 17, 68, 20, 3, 173, 33, 39, 45, 23, 6, 26, 71, 29, 9, 179, 51, 57, 63, 32 },
		{ 224, 86, 156, 37, 243, 74, 12, 103, 109, 115, 227, 89, 159, 43, 249, 77, 15, 121, 127, 133 },
		{ 34, 80, 104, 157, 105, 110, 83, 311, 138, 141, 40, 85, 116, 160, 111, 122, 88, 317, 144, 147 },
		{ 35, 69, 117, 150, 19, 225, 176, 345, 153, 246, 41, 72, 123, 252, 22, 228, 182, 348, 258, 264},
		{ 1, 25, 49, 139, 87, 178, 294, 270, 344, 347, 4, 28, 55, 142, 90, 184, 297, 350, 353, 356 },
		{ 61, 93, 7, 188, 92, 277, 108, 346, 359, 363, 67, 96, 10, 194, 95, 280, 114, 349, 366, 369 },
		{ 2, 18, 70, 120, 177, 372, 140, 13, 375, 378, 5, 21, 73, 126, 183, 379, 143, 16, 380, 381 },
		{ 31, 36, 146, 190, 209, 129, 98, 196, 230, 382, 38, 42, 149, 202, 212, 135, 101, 245, 233, 383 },
		{ 155, 384, 91, 385, 158, 185, 236, 239, 242, 386, 161, 387, 94, 388, 164, 191, 248, 254, 260, 389 },
		{ 266, 226, 162, 106, 255, 97, 167, 390, 391, 392, 272, 229, 165, 112, 261, 100, 170, 393, 394, 395 },
		{ 46, 276, 128, 163, 207, 134, 279, 323, 396, 397, 52, 282, 244, 166, 210, 250, 285, 329, 398, 399 },
		{ 47, 75, 213, 400, 44, 231, 200, 351, 401, 402, 53, 78, 216, 403, 48, 234, 206, 354, 404, 405 },
		{ 107, 50, 118, 145, 99, 251, 300, 406, 407, 408, 113, 54, 124, 148, 102, 257, 303, 409, 410, 411 },
		{ 130, 208, 119, 312, 232, 283, 132, 352, 412, 413, 136, 211, 125, 318, 235, 286, 313, 355, 414, 415 },
		{ 8, 24, 76, 319, 189, 416, 152, 131, 417, 418, 11, 27, 79, 325, 195, 419, 295, 137, 420, 421 },
		{ 56, 60, 298, 263, 215, 219, 238, 269, 362, 422, 62, 66, 301, 275, 218, 222, 241, 315, 364, 423 },
		{ 247, 424, 288, 425, 253, 197, 365, 367, 368, 426, 259, 427, 291, 428, 265, 203, 370, 371, 373, 429 },
		{ 374, 278, 168, 174, 267, 293, 271, 430, 431, 432, 376, 281, 171, 180, 273, 296, 310, 433, 434, 435 },
		{ 58, 299, 256, 169, 316, 262, 302, 335, 436, 437, 64, 305, 268, 172, 322, 274, 308, 341, 438, 439 },
		{ 59, 81, 328, 440, 175, 237, 324, 357, 441, 442, 65, 84, 334, 443, 181, 240, 330, 360, 444, 445 },
		{ 314, 187, 186, 151, 214, 321, 306, 446, 447, 448, 320, 193, 192, 154, 217, 327, 309, 449, 450, 451 },
		{ 198, 220, 326, 336, 284, 289, 331, 358, 452, 453, 204, 223, 332, 342, 287, 292, 337, 361, 454, 455 },
		{ 14, 30, 82, 343, 201, 456, 304, 338, 457, 458, 462, 478, 530, 568, 636, 459, 307, 461, 477, 480 },
		{ 199, 205, 600, 333, 221, 340, 290, 339, 377, 483, 479, 482, 603, 637, 668, 460, 545, 643, 493, 486 },
		{ 463, 489, 528, 492, 466, 632, 499, 505, 511, 563, 469, 569, 531, 575, 472, 638, 517, 523, 683, 581 },
		{ 686, 548, 615, 497, 702, 534, 475, 587, 593, 598, 689, 551, 618, 503, 708, 537, 565, 601, 604, 607 },
		{ 494, 540, 564, 616, 571, 570, 542, 771, 612, 705, 500, 544, 576, 619, 577, 582, 547, 777, 711, 717 },
		{ 495, 529, 583, 723, 485, 684, 635, 805, 729, 804, 501, 532, 595, 807, 488, 687, 641, 808, 810, 813 },
		{ 464, 491, 509, 599, 546, 649, 754, 816, 819, 823, 467, 496, 515, 602, 549, 655, 757, 826, 829, 832 },
		{ 520, 552, 470, 647, 554, 736, 574, 806, 835, 838, 521, 555, 473, 653, 557, 739, 580, 809, 839, 840 },
		{ 465, 481, 533, 586, 642, 841, 606, 476, 842, 843, 468, 484, 536, 592, 648, 844, 609, 567, 845, 846 },
		{ 498, 502, 611, 661, 671, 614, 561, 704, 692, 847, 504, 508, 755, 710, 674, 617, 685, 716, 695, 848 },
		{ 620, 849, 550, 850, 623, 644, 698, 701, 707, 851, 626, 852, 553, 853, 629, 650, 713, 719, 725, 854 },
		{ 731, 688, 621, 527, 714, 556, 666, 855, 856, 857, 822, 691, 624, 566, 720, 560, 669, 858, 859, 860 },
		{ 506, 735, 588, 622, 672, 594, 738, 783, 861, 862, 512, 741, 703, 625, 675, 709, 744, 789, 863, 864 },
		{ 507, 535, 678, 865, 510, 690, 658, 811, 866, 867, 573, 514, 572, 605, 558, 722, 760, 868, 869, 870 },
		{ 579, 516, 578, 608, 559, 728, 763, 871, 872, 873, 584, 562, 585, 659, 694, 742, 773, 812, 874, 875 },
		{ 589, 667, 590, 665, 696, 745, 779, 815, 876, 877, 596, 670, 591, 772, 697, 748, 785, 817, 878, 879 },
		{ 471, 487, 539, 791, 654, 880, 758, 597, 881, 882, 474, 490, 541, 796, 660, 883, 761, 774, 884, 885 },
		{ 519, 522, 764, 734, 677, 681, 700, 775, 824, 886, 526, 634, 767, 781, 680, 706, 737, 787, 825, 887 },
		{ 712, 888, 747, 889, 718, 656, 827, 828, 830, 890, 724, 891, 751, 892, 730, 662, 831, 833, 834, 893 },
		{ 836, 740, 627, 633, 726, 753, 770, 894, 895, 896, 837, 743, 630, 639, 732, 756, 776, 897, 898, 899 },
		{ 518, 759, 715, 628, 782, 721, 762, 795, 900, 901, 524, 765, 727, 631, 788, 733, 768, 801, 902, 903},
		{ 513, 538, 794, 904, 640, 693, 778, 814, 905, 906, 525, 543, 800, 907, 646, 699, 784, 820, 908, 909 },
		{ 780, 652, 645, 610, 673, 793, 766, 910, 911, 912, 786, 664, 651, 613, 676, 799, 769, 913, 914, 915 },
		{ 657, 679, 792, 790, 746, 749, 797, 818, 916, 917, 663, 682, 798, 802, 750, 752, 803, 821, 918, 919 },


};

const ap_uint<16> pidx[920] = {
		3, 20, 35, 3, 20, 35, 3, 20, 35, 3, 20, 35, 3, 20, 35, 3, 20, 0, 25, 6, 0, 25, 6, 0, 25, 6, 0, 25, 6, 0, 25, 6, 0,
		1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10,
		2, 24, 37, 2, 24, 37, 2, 24, 37, 2, 24, 37, 2, 24, 37, 2, 24, 2, 36, 28, 2, 36, 28, 2, 36, 28, 2, 36, 28, 2, 36, 28, 2, 36, 28,
		0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20,
		0, 29, 4, 0, 29, 4, 0, 29, 4, 0, 29, 4, 0, 29, 4, 0, 29,3, 34, 40, 3, 34, 40, 3, 34, 40, 3, 34, 40, 3, 34, 40, 3, 34, 40,
		7, 10, 6, 8, 5, 14, 7, 10, 6, 8, 5, 14, 7, 10, 6, 8, 5, 14, 7, 10, 6, 8, 5, 14, 7, 10, 6, 8, 5, 14, 7, 10, 6, 8,
		3, 28, 30, 3, 28, 30, 3, 28, 30, 3, 28, 30, 3, 28, 30, 3, 28,1, 17, 36, 1, 17, 36, 1, 17, 36, 1, 17, 36, 1, 17, 36, 1, 17, 36,
		1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14,
		2, 9, 36, 2, 9, 36, 2, 9, 36, 2, 9, 36, 2, 9, 36, 2, 9, 2, 38, 4, 2, 38, 4, 2, 38, 4, 2, 38, 4, 2, 38, 4, 2, 38,
		3, 13, 8, 21, 20, 14, 3, 13, 8, 21, 20, 14, 3, 13, 8, 21, 20, 14, 3, 13, 8, 21, 20, 14, 3, 13, 8, 21, 20, 14, 3, 13, 8, 21,
		0, 39, 45, 0, 39, 45, 0, 39, 45, 0, 39, 45, 0, 39, 45, 0, 39, 45, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		3, 20, 35, 3, 20, 35, 3, 20, 35, 3, 20, 35, 3, 20, 35, 3, 20, 0, 25, 6, 0, 25, 6, 0, 25, 6, 0, 25, 6, 0, 25, 6, 0,
		1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10, 6, 1, 12, 19, 6, 10, 6, 1, 12, 6, 10, 10, 6, 1, 12, 19, 6, 10,
		2, 24, 37, 2, 24, 37, 2, 24, 37, 2, 24, 37, 2, 37, 2, 24, 2, 36, 28, 2, 36, 28, 2, 36, 28, 2, 36, 28, 2, 36, 28, 28, 2, 36, 28,
		0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20, 21, 0, 15, 3, 10, 20, 21, 0, 15, 10, 20, 20, 21, 0, 15, 3, 10, 20,
		0, 29, 4, 0, 29, 4, 0, 29, 4, 0, 29, 4, 29, 4, 0, 29, 3, 34, 40, 3, 34, 40, 3, 34, 40, 3, 34, 40, 3, 34, 40, 3, 34, 40,
		7, 10, 6, 8, 5, 14, 7, 10, 6, 8, 5, 14, 7, 10, 6, 8, 5, 14, 7, 10, 6, 8, 5, 14, 7, 10, 8, 8, 5, 14, 7, 10, 6, 8,
		3, 28, 30, 3, 28, 30, 3, 28, 30, 3, 28, 30, 3, 28, 30, 3, 28, 1, 17, 36, 1, 17, 36, 1, 17, 36, 1, 17, 36, 1, 36, 36, 1, 17, 36,
		1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14, 0, 3, 1, 18, 15, 14,
		2, 9, 36, 2, 9, 36, 2, 9, 36, 2, 9, 36, 2, 9, 9, 36, 2, 9, 2, 38, 4, 2, 38, 4, 2, 38, 4, 2, 38, 4, 2, 38, 4, 2, 38,
		3, 13, 8, 21, 20, 14, 3, 13, 8, 21, 20, 14, 3, 13, 8, 21, 20, 14, 3, 13, 8, 21, 20, 14, 3, 13, 21, 21, 20, 14, 3, 13, 8, 21,
		0, 39, 45, 0, 39, 45, 0, 39, 45, 0, 39, 45, 0, 45, 45, 0, 39, 45, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

};



const ap_uint<8> sel[49] = {0,20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260,
		280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600,
		620, 640, 660, 680, 700, 720, 740, 760, 780, 800, 815, 830, 845, 860, 875, 890, 905,
		920};

void ldpcDec(ap_int<8> llr[N],bool output[K]);

inline ARRAY12 rowUpdate12(ARRAY12 a);
//inline void colUpdate3(bool r[3072],ap_int<12> l[3072],ap_int<12> a[3072],ap_int<12> b[3072],ap_int<12> c[3072]);
//inline void colUpdate2(bool r[3072],ap_int<12> l[3072],ap_int<12> a[3072],ap_int<12> b[3072]);
//inline void colUpdate6(bool r[3072],ap_int<12> l[3072],ap_int<12> a[3072],ap_int<12> b[3072],ap_int<12> c[3072],ap_int<12> d[3072],ap_int<12> e[3072],ap_int<12> f[3072]);

inline void colUpdate20(bool r[3072],ap_int<12> l[3072],ap_int<12> a[3072],ap_int<12> b[3072],ap_int<12> c[3072],ap_int<12> d[3072],ap_int<12> e[3072],ap_int<12> f[3072],ap_int<12> g[3072],ap_int<12> h[3072],ap_int<12> i[3072],
		ap_int<12> j[3072],ap_int<12> k[3072],ap_int<12> L[3072],ap_int<12> m[3072],ap_int<12> n[3072],ap_int<12> o[3072],
ap_int<12> p[3072],ap_int<12> q[3072],ap_int<12> R[3072],ap_int<12> S[3072],ap_int<12> T[3072]);

inline void colUpdate15(bool r[3072],ap_int<12> l[3072],ap_int<12> a[3072],ap_int<12> b[3072],ap_int<12> c[3072],ap_int<12> d[3072],ap_int<12> e[3072],ap_int<12> f[3072],ap_int<12> g[3072],ap_int<12> h[3072],ap_int<12> i[3072],
		ap_int<12> j[3072],ap_int<12> k[3072],ap_int<12> L[3072],ap_int<12> m[3072],ap_int<12> n[3072],ap_int<12> o[3072]);
#endif
